import os
from typing import List, Dict, Optional

from dotenv import load_dotenv
from huggingface_hub import InferenceClient

load_dotenv()

HF_TOKEN = os.getenv("HF_TOKEN")
HF_INFERENCE_PROVIDER = "hf-inference"
DEFAULT_FINBERT_MODEL = "ProsusAI/finbert"

API_NOT_INITIALIZED_ERROR = "[–û–®–ò–ë–ö–ê API] HF_TOKEN –Ω–µ –∑–∞–¥–∞–Ω."
API_GENERAL_ERROR = "[–û–®–ò–ë–ö–ê API] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ HuggingFace."


def call_finbert(text: str, model: Optional[str] = None) -> List[Dict[str, float]]:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ FinBERT."""
    if not HF_TOKEN:
        return [{"label": API_NOT_INITIALIZED_ERROR, "score": 0.0}]

    try:
        client = InferenceClient(
            provider=HF_INFERENCE_PROVIDER,
            api_key=HF_TOKEN,
        )
        # –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ!
        res = client.text_classification(text=text, model=model or DEFAULT_FINBERT_MODEL)
        return {res[0]['label'] : res[0]['score'],
                res[1]['label'] : res[1]['score'],
                res[2]['label'] : res[2]['score']}
    except Exception as e:
        return API_GENERAL_ERROR


if __name__ == "__main__":
    sample = (
        "üö® UPDATE: ZachXBT says the WhiteRock engineer rumored to have "
        "‚Äúpassed away by a missile‚Äù is still active. Previously, founder "
        "Ildar Ilham was arrested in the UAE over the $30M ZKasino scam."
    )

    labels = call_finbert(sample)

    print(labels)
